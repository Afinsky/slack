service: app
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  #SANDBOX profile
  #profile: sandbox                                                   # <-- That's work too (Hardcode)
  #profile: ${file(./configs/${self:custom.stage}.env.json):profile}  # <-- That's work too (From environment file case)
  profile: ${file(./profiles/profiles.json):${self:custom.stage}}
  lambdaHashingVersion: 20201221
  # you can overwrite defaults here
  stage: ${opt:stage, 'dev'} #dev #${file(../config.${opt:stage, self:provider.stage, 'dev'}.json):CREDS}
  region: us-east-1
  memorySize: 512
  logRetentionInDays: 14
  environment:
    #- ${file(./configs/${self:custom.stage}.env.json)}               # <-- That's work too (Full environment file)
    API_SECRET_KEY: ${file(./configs/${self:custom.stage}.env.json):API_SECRET_KEY}

package:
  individually: true

plugins:
  - serverless-python-requirements
  - serverless-package-python-functions
  - serverless-offline-assume-role
  - serverless-offline

custom:
  stage: ${opt:stage, 'dev'} #self:provider.stage
  pythonRequirements:
    dockerizePip: true
  pkgPyFuncs: # plugin configuration
    buildDir: _build
    requirementsFile: 'requirements.txt'
    globalRequirements:
      - ./requirements.txt
    #   globalIncludes:
    #     - ./common_files
    cleanup: true

functions:
  notification:
    name: ${opt:stage, 'dev'}-notification
    description:
    handler: handler.hello
    package:
      include:
        - src/notification
      artifact:
        - ${self:custom.pkgPyFuncs.buildDir}/${opt:stage, 'dev'}-notification.zip
    events:
      # Invoke Lambda function every 2nd minute from Mon-Fri
      - schedule: cron(0/2 * ? * MON-FRI *)
    tags:
      foo: bar
      baz: qux




# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
